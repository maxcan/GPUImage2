1== 9
0.9
import com.pnltracker.Model
import com.pnltracker._
import com.pnltracker.Model._
import com.novus.salat._
val s = Stock()
:help
:imports
import java.util.Date
import com.pnltracker.App
import scala.com.pnc
imp
Stock()
import Model
;
import com.;
import com.pnltracker._
val =  Stock()
vals  =  Stock()
vals  =  Stock()F
val s = Stock()
s
val i = SecurityDAO.insert(new Security("aapl", new Stock())
;
val i = SecurityDAO.insert(Security("aapl", Stock())
;
val i = SecurityDAO.insert(Security("aapl", Stock())  ;
val i = SecurityDAO.insert(Security("aapl", Stock()))  ;
val i = SecurityDAO.insert(Security(symbol -> "aapl", securityType ->  Stock()))  ;
val i = SecurityDAO.insert(Security(symbol = "aapl", securityType = Stock()))  ;
import com.pnltracker._
SecurityDAO.find()
SecurityDAO.findOne()
val i = SecurityDAO.insert(Security(symbol = "asdfsdfapl", securityType = Dummy()))  ;
import com.pnltracker._
val i = SecurityDAO.insert(Security(symbol = "asdfsdfapl", securityType = Dummy()))  ;
val i = SecurityDAO.insert(Security(symbol = "asdfsdfapl", securityType = Dummy("booboo")))  ;
import com.pnltracker._
val i = SecurityDAO.insert(Security(symbol = "asdfsdfapl", securityType = Dummy("booboo")))  ;
console
val i = SecurityDAO.insert(Security(symbol = "asdfsdfapl", securityType = Dummy("booboo")))  ;
import com.pnltracker._
val i = SecurityDAO.insert(Security(symbol = "asdfsdfapl", securityType = Dummy("booboo")))  ;
val i = SecurityDAO.insert(Security(symbol = "asdfsdfapl", securityType = Stock()))  ;
SecurityDAO.find()
SecurityDAO.find(Unit)
val a = SecurityDAO.find()
val a = SecurityDAO.findOne(MongoDBObject())
import com.mongodb.casbah
val a = SecurityDAO.findOne(MongoDBObject())
import com.mongodb.casbah.Imports._
import com.mongodb.casbah.Imports
val a = SecurityDAO.findOne(MongoDBObject())
import org.jsoup.Jsoup
import java.io.File
import org.jsoup.nodes._
var doc = Jsoup.parse(new File("../assets/ib_sample.html"), "UTF-8")
tbl = doc.select("#tblTransactions_U764128 tr") 
val tbl = doc.select("#tblTransactions_U764128 tr") 
val it = tbl.iterator()
it foreach ((e) => println("ho"))
val it = Iterator( tbl.iterator())
it foreach ((e) => println("ho"))
val it = Iterator( tbl.children()iterator())
val it = Iterator( tbl.first().children().iterator())
it foreach ((e) => println("ho"))
it map ((e) => println(e.ownText()))
[1,34,5].max
max(13,5,6,4,3)
mac
List(1,3,5,7).max
println
var f  = println
def f(i: Int) { i + 4 } 
def f(is: Int) { is + 4 } 
f(4)
(1,3,5)
true || false
import org.scala_tools.time
import org.scala_tools
Traversable
import Model
;
import com.pnltracker.UserDAO
test
TradeD
import com.pnltracker._\
import com.pnltracker._
TradeDAO.findOne
TradeDAO.findOne _
TradeDAO.find _
TradeDAO.findOne(MongoDBObject())
import com.mongodb.casbah.imports._
import com.mongodb.casbah.Imports._
TradeDAO.findOne(MongoDBObject())
"54".toInt
"5sdf4".toInt
"54".toInt?
"54".toIntOption
"234".parseInt
import Scalaz._
import =scalaz._
import scalaz._
import Scalaz._
"234".parseInt
"234".parseInt.toOption
abs(-1)
Scala.math.abs(1)
scala.math.abs(1)
scala.math.abs(-11)
ExecutionDAO.find(MongoDBObject())
import com.pnltracker._
import com.mongodb.casbah.Imports._
ExecutionDAO.find(MongoDBObject())
import com.pnltracker
ExecutionDAO.find(MongoDBObject())
import com.pnltracker
import com.mongodb.casbah.Imports._
ExecutionDAO.find(MongoDBObject())
import com.pnltracker._
ExecutionDAO.find(MongoDBObject())
val i = ExecutionDAO.find(MongoDBObject())
val m = i.map(_.principle())
m.sum()
m.sum
val date = new SimpleDateFormat("yyy-MM-dd HH:mm").parse("2008-05-06 13:29")
import java.util.Date
val date = new SimpleDateFormat("yyy-MM-dd HH:mm").parse("2008-05-06 13:29")
import java.text.SimpleDateFormat
val date = new SimpleDateFormat("yyy-MM-dd HH:mm").parse("2008-05-06 13:29")
val date = new SimpleDateFormat("yyy-MM-dd HH:mm").parse("2008-05-06 1xxx3:29")
Seq()
DpeRequest
import com.nitro.rcf.messages
DpeRequest
import com.nitro.rcf.messages._
DpeRequest
import com.nitro.rcf.messages._
var m = 1
var meta = NitroMeta(1, Map())
var dr = DpeRequest(meta, CNil)
var dr = DpeRequest(meta)
var dr = DpeRequest(meta, shapeless.CNil)
var req = RasterizeReq("rId", "rUri")
var req = RasterizeRequest("rId", "rUri")
var dr = DpeRequest(meta, req)
import shapeless._
import shapeless
._
var dr = DpeRequest(meta, req)
var dr = DpeRequest(meta, Coproduct[DpeRequest](req))
var dr = DpeRequest(meta, Coproduct[DpeRequest.RequestType](req))
var dr = DpeRequest(meta, Coproduct[RasterizeRequest](req))
var dr = DpeRequest(meta, Coproduct[DpeRequest.RequestType](???))
var dr = DpeRequest(meta, Coproduct[DpeRequest.type](req))
var dr = DpeRequest(meta, Coproduct[RasterizeRequest](req))
type CP = :+:[SignAndRasterizeRequest, :+:[RasterizeRequest, CNil]
;
        DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[DpeRequest.RequestType](RasterizeRequest("1234", exampleUri.toString))),
import shapeless
._
import com.nitro.rcf.messages._
DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[DpeRequest.RequestType](RasterizeRequest("1234", exampleUri.toString)))
DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[DpeRequest.RequestType](RasterizeRequest("1234", "url")))
import com.nitro.rcf
import com.nitro.rcf._
DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[DpeRequest.RequestType](RasterizeRequest("1234", "url")))
import com.nitro.rcf.messages._
DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[DpeRequest.RequestType](RasterizeRequest("1234", "url")))
import com.nitro.clients.kafka._
DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[DpeRequest.RequestType](RasterizeRequest("1234", "url")))
import shapeless._
DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[DpeRequest.RequestType](RasterizeRequest("1234", "url")))
DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[RasterizeRequest](RasterizeRequest("1234", "url")))
DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct(RasterizeRequest("1234", "url")))
DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct(Coproduct(RasterizeRequest("1234", "url"))))
type Foo = shapeless.:+:[SignAndRasterizeRequest, shapeless.:+:[RasterizeRequest, shapeless.CNil]]
DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[Foo](RasterizeRequest("1234", "url")))
var req = DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[Foo](RasterizeRequest("1234", "url")))
req.toString
EncoderFactory.get()
import org.apache.avro.generic._
import org.apache.avro.io._
EncoderFactory.get()
EncoderFactory.get().jsonEncoder(req)
req.SCHEMA
req.SCHEMA$
req.getSchema()
var w = new StringWriter()
import com.nitro.scalaAvro.runtime._
req
req.schema
GeneratedMessageCompanion[DpeRequest](req)
import com.nitro.scalaAvro.runtime.GeneratedMessageCompanion
req.schema
req
req.schema
req.schema()
DpeRequest.schema
req.companion
DpeRequest
var enc = EncoderFactory.get().jsonEncoder(DpeRequest.schema)
DpeRequest.schema
var enc = EncoderFactory.get().jsonEncoder(DpeRequest.schema, System.out)
val writer = new GenericDatumWriter[GenericRecord](companion.schema)
val writer = new GenericDatumWriter[GenericRecord](req.companion.schema)
val gen = req.toMutable
writer.write(gen, enc)
enc.flush()
type ReqType = shapeless.:+:[SignAndRasterizeRequest, shapeless.:+:[RasterizeRequest, shapeless.CNil]]
import com.nitro.rcf.messages._
type ReqType = shapeless.:+:[SignAndRasterizeRequest, shapeless.:+:[RasterizeRequest, shapeless.CNil]]
var req = DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[Foo](RasterizeRequest("1234", "url")))
import com.nitro.rcf.messages._
var req = DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[Foo](RasterizeRequest("1234", "url")))
type ReqType = shapeless.:+:[SignAndRasterizeRequest, shapeless.:+:[RasterizeRequest, shapeless.CNil]]
var req = DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[ReqType](RasterizeRequest("1234", "url")))
history
:history
!203
:Help
:help
:hist
:hist 20
:hist 30
var enc = EncoderFactory.get().jsonEncoder(DpeRequest.schema, System.out)
import org.apache.avro.io._
var enc = EncoderFactory.get().jsonEncoder(DpeRequest.schema, System.out)
val writer = new GenericDatumWriter[GenericRecord](req.companion.schema)
var req = DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[ReqType](RasterizeRequest("1234", "url")))
val writer = new GenericDatumWriter[GenericRecord](req.companion.schema)
var req = DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[ReqType](RasterizeRequest("1234", "url")))
import shapeless._
type ReqType = shapeless.:+:[SignAndRasterizeRequest, shapeless.:+:[RasterizeRequest, shapeless.CNil]]
var req = DpeRequest(NitroMeta(System.currentTimeMillis, headers = Map("server_uuid" -> "dummy_id")), Coproduct[ReqType](RasterizeRequest("1234", "url")))
writer.write(gen, enc)
val gen = req.toMutable
writer.write(gen, enc)
val writer = new GenericDatumWriter[GenericRecord](req.companion.schema)
import org.apache.avro.generic._
val writer = new GenericDatumWriter[GenericRecord](req.companion.schema)
writer.write(gen, enc)
enc.flush()
:history 20
var a= "asdasd?sdfsdf.sdf.df.sdf"
a
a.replaceAll("?.*$","")
a.replaceAll("\?.*$","")
a.replaceAll("[?].*$","")
a
a.replaceAll("[?].*$","?a=b")
val a = Seq("a","b","c","d")
a.contains("4")
a.contains("a")
val a = Seq("a","b","c","dddd","ee")
"Asd".endsWith9
"Asd".endsWith("d")
"Asd".endsWith("df")
val a = Seq("a","b","c","dddd","ee")
a.filter(_.endsWith("dd"))
a.filter(_.endsWith("dd")).length > 0
a.filter(_.endsWith("dsdfsdd")).length > 0
"a" == "a"
false || false
false || true
